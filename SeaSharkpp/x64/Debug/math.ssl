# Defines the factorial of x
def Factorial(x)
{
	result = 1
	i = 2
	while(i <= x)
	{
		result = result * i
		i++
	}
	return result
}

# Defines x raised to the yth power where y is an integer
def intPow(x, y)
{
	result = 1
	i = 0
	while(i < y)
	{
		result = result * x
		i++
	}
	return result
}

# Input is in radians
# Uses the taylor series for sin(x) to approximate it with 15 iterations
def sin(x)
{
	Tao = 2 * PI()
	while(x < 0)
	{
		x = x + Tao
	}
	while(x > Tao)
	{
		x = x - Tao
	}
	halfpi = PI() / 2
	multi = 1
	if(x >= PI())
	{
		multi = -1
		x = x - PI()
	}
	if(x < PI())
	{
		if(x > halfpi)
		{
			x = PI() - x
		}
	}
	result = 0
	i = 0
	while(i < 15)
	{
		oddNum = 2 * i + 1
		pow = intPow(x, oddNum)
		fact = Factorial(oddNum)
		diff = pow / fact

		if(i % 2 == 0)
		{
			result = result + diff
		}
		else
		{
			result = result - diff
		}
		i++
	}
	return result * multi
}

def PI()
{
	return 3.14159265358979323846264338
}

def ToRad(x)
{
	return x * PI() / 180
}

def ToDegrees(x)
{
	return x * 180 / PI()
}